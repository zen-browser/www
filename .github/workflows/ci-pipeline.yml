name: CI Pipeline

on:
  pull_request:
    types: [opened, synchronize, reopened]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check_changes:
    name: Check Changes
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      exists: ${{ steps.filter.outputs.exists }}
    env:
      CI_IGNORE: |
        *.md
        .gitignore
        .gitattributes
        .vscode/**
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Filter Changed Files
        id: filter
        shell: bash
        run: |
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          CHANGED=$(git diff --name-only "$BASE_SHA" "$GITHUB_SHA")
          IGNORED=$(echo "$CHANGED" | git check-ignore --stdin --exclude-from=<(printf '%s\n' "$CI_IGNORE") || true)
          FILTERED=$(comm -23 <(echo "$CHANGED" | sort) <(echo "$IGNORED" | sort))
          if [[ -z "$FILTERED" ]]; then
            echo "exists=false" >> "$GITHUB_OUTPUT"
          else
            echo "exists=true" >> "$GITHUB_OUTPUT"
          fi

  quality_checks:
    name: ${{ matrix.name }}
    needs: [check_changes]
    if: ${{ needs.check_changes.outputs.exists == 'true' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - check: lint
            name: Lint
          - check: format
            name: Format
          - check: test
            name: Test
          - check: spell
            name: Spell Check
    steps:
      - uses: actions/checkout@v4

      - name: Setup Bun with Cache
        uses: ./.github/actions/setup-bun-with-cache
        with:
          cache-suffix: ${{ matrix.check }}

      - name: Run ${{ matrix.name }}
        run: bunx turbo run ${{ matrix.check }}

  build:
    name: Build
    needs: [check_changes]
    if: ${{ needs.check_changes.outputs.exists == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Bun with Cache
        uses: ./.github/actions/setup-bun-with-cache
        with:
          cache-suffix: build
          enable-astro-cache: "true"

      - name: Run Build
        run: bunx turbo run build

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-dist
          path: dist/
          retention-days: 1

  playwright:
    name: Playwright Tests
    needs: [check_changes, build]
    if: ${{ needs.check_changes.outputs.exists == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-dist
          path: dist/

      - name: Setup Bun with Cache
        uses: ./.github/actions/setup-bun-with-cache
        with:
          cache-suffix: playwright

      - name: Cache Playwright Browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/bun.lock') }}
          restore-keys: ${{ runner.os }}-playwright-

      - name: Install Playwright Browsers
        run: bunx playwright install --with-deps

      - name: Run Playwright Tests
        run: bunx turbo run test:playwright
        timeout-minutes: 10

  verify:
    name: Verify
    needs: [check_changes, quality_checks, playwright]
    runs-on: ubuntu-latest
    if: always()
    outputs:
      success: ${{ steps.set-result.outputs.success }}
    steps:
      - name: Set Result
        id: set-result
        run: |
          # Check if changes exist but no jobs ran, or if any job failed or was cancelled
          if [[ "${{ needs.check_changes.outputs.exists }}" != "true" ]]; then
            echo "success=true" >> $GITHUB_OUTPUT
            echo "No relevant changes detected - pipeline passed"
          elif [[ "${{ contains(needs.*.result, 'failure') }}" == "true" || "${{ contains(needs.*.result, 'cancelled') }}" == "true" ]]; then
            echo "success=false" >> $GITHUB_OUTPUT
            echo "Pipeline failed - some jobs failed or were cancelled"
            exit 1
          else
            echo "success=true" >> $GITHUB_OUTPUT
            echo "All jobs completed successfully"
          fi
