---
import { getLocale, getUI } from '~/utils/i18n'
import Description from './Description.astro'
import Video from './Video.astro'

const locale = getLocale(Astro)

const {
  routes: {
    index: { features },
  },
} = getUI(locale)

interface Props {
  titles?: string[]
}

const { titles } = Astro.props
const descriptions = Object.values(features.featureTabs).map(tab => tab.description)
---

<section id="features" class="relative flex w-full flex-col py-12 text-start lg:py-36">
  <Description class="mb-2 text-4xl font-bold sm:text-6xl">
    {
      (titles || features.titles).map((title, index) =>
        title !== '\n' ? (
          <span class="title-line opacity-0" data-index={index}>
            {title}
          </span>
        ) : (
          <br class="hidden md:block" />
        )
      )
    }
  </Description>

  <p class="feature-description-text opacity-0 lg:w-1/2">
    {features.description}
  </p>

  <div class="mt-6 flex flex-col gap-6 lg:flex-row lg:justify-between lg:gap-2">
    <div class="flex w-full flex-col lg:w-1/3">
      <!-- Mobile Tabs -->
      <div class="flex gap-2 overflow-x-auto overflow-y-clip lg:hidden">
        {
          Object.entries(features.featureTabs).map(([key, tab], i) => (
            <button
              class="feature-tab whitespace-nowrap opacity-0"
              data-index={i}
              data-feature-key={key}
              data-active={i === 0 ? 'true' : undefined}
            >
              {tab.title}
            </button>
          ))
        }
      </div>

      <!-- Desktop features list -->
      <div id="features-list" class="hidden lg:flex lg:flex-col lg:gap-3">
        {
          Object.entries(features.featureTabs).map(([key, tab], i) => (
            <div
              class="feature opacity-0"
              data-index={i}
              data-feature-key={key}
              data-active={i === 0 ? 'true' : undefined}
            >
              <Description class="text-2xl font-bold">{tab.title}</Description>
              <Description>{tab.description}</Description>
            </div>
          ))
        }
      </div>

      <!-- Mobile description -->
      <div class="feature-description mt-4 lg:hidden" data-descriptions={descriptions.join('|||')}>
      </div>
    </div>

    <!-- Video Section -->
    <div class="sticky top-6 h-fit w-full lg:w-3/5">
      <div class="relative w-full">
        <div class="video-stack relative h-full w-full">
          <Video
            autoplay
            loop
            muted
            playsinline
            preload="none"
            class="feature-video"
            name="workspaces"
          />
          <Video
            autoplay
            loop
            muted
            playsinline
            preload="none"
            class="feature-video"
            name="compact-mode"
          />
          <Video
            autoplay
            loop
            muted
            playsinline
            preload="none"
            class="feature-video"
            name="glance"
          />
          <Video
            autoplay
            loop
            muted
            playsinline
            preload="none"
            class="feature-video"
            name="split-views"
          />
        </div>
      </div>
    </div>
  </div>
</section>

<script>
  import { animate, stagger } from 'animejs'

  // Animate Titles
  animate('.title-line', {
    opacity: [0, 1],
    delay: stagger(200, { start: 200 }),
    duration: 600,
    easing: 'easeOutQuad',
  })

  animate('.feature-description-text', {
    opacity: [0, 1],
    delay: 600,
    duration: 600,
    easing: 'easeOutQuad',
  })

  animate('.feature-tab, .feature', {
    opacity: [0, 1],
    delay: stagger(200, { start: 800 }),
    duration: 500,
    easing: 'easeOutQuad',
  })

  const features = document.querySelectorAll('.feature, .feature-tab') as NodeListOf<HTMLElement>
  const descriptionEl = document.querySelector('.feature-description') as HTMLDivElement | null
  const descriptions = descriptionEl?.dataset.descriptions?.split('|||')
  const videos = document.querySelectorAll('.feature-video') as NodeListOf<HTMLVideoElement>

  function changeToFeature({ target }: { target: HTMLElement }) {
    const targetEl = target?.closest('.feature, .feature-tab') as HTMLElement | null
    if (!targetEl) return

    const index = parseInt(targetEl.dataset.index as string, 10)
    if (isNaN(index)) return

    // Toggle active states
    features.forEach((el, i) => {
      if (i % 4 === index) {
        el.setAttribute('data-active', 'true')
      } else {
        el.removeAttribute('data-active')
      }
    })

    // Update mobile description
    if (descriptionEl && descriptions) {
      descriptionEl.textContent = descriptions[index]
    }

    // Animate videos
    videos.forEach((vid, i) => {
      const yOffset = (i - index) * 20
      const zOffset = i === index ? 0 : -100 - Math.abs(i - index) * 50
      const scale = i === index ? 1 : 0.95
      const rotation = (i - index) * 3

      if (i === index) {
        vid.setAttribute('data-active', 'true')
        vid.style.opacity = '1'
        vid.style.transform = `translate3d(-50%, 0, 0) scale(${scale})`
        vid.style.zIndex = '10'
        vid.currentTime = 0
        vid.play()
      } else {
        vid.removeAttribute('data-active')
        vid.style.transform = `translate3d(-50%, ${yOffset}px, ${zOffset}px) rotate3d(1, 0, 0, ${rotation}deg) scale(${scale})`
        vid.style.zIndex = String(1 - Math.abs(i - index))
        vid.pause()
      }
    })
  }

  // Set up event listeners
  features.forEach(f => f.addEventListener('click', changeToFeature as unknown as EventListener))
  changeToFeature({ target: features[0] })
</script>
<style>
  .feature {
    @apply w-full cursor-pointer select-none rounded-lg p-4 opacity-0 hover:bg-subtle;
    transition: background 0.2s ease-in-out;

    &[data-active='true'] {
      @apply bg-subtle;
    }
  }

  .feature-tab {
    @apply rounded-lg px-4 py-2 text-lg font-medium opacity-0 hover:bg-subtle;
    transition: background 0.2s ease-in-out;

    &[data-active='true'] {
      @apply bg-subtle;
    }
  }

  .feature-description {
    @apply px-4 text-sm;
  }

  .video-stack {
    @apply aspect-video;
    perspective: 2000px;
    transform-style: preserve-3d;
  }

  .feature-video {
    @apply left-1/2 hidden transform rounded-3xl shadow-md lg:absolute lg:mx-auto lg:block lg:w-full dark:opacity-80;
    max-width: 800px;
    transition: all 0.6s cubic-bezier(0.4, 0, 0.2, 1);
    position: absolute;
    top: 0;
    transform-origin: top center;
    backface-visibility: hidden;
    will-change: transform, opacity;
    transform: translate3d(-50%, 0, -100px) scale(0.95);
  }

  /* Don't animate translation on small screens */
  @media (max-width: 1024px) {
    .feature-video {
      position: absolute;
      inset: 0;
      width: 100%;
      height: 100%;
      opacity: 0;
      transform: none !important;
      display: none;
      object-fit: cover;

      &[data-active='true'] {
        display: block;
        opacity: 1;
      }
    }

    .video-stack {
      @apply overflow-hidden rounded-xl;
      position: relative;
      width: 100%;
      aspect-ratio: 16/9;
    }
  }
</style>
