---
import Description from '../components/Description.astro'
import { motion } from 'motion/react'
import { getTitleAnimation } from '../animations'

import WorkspacesVideo from '../assets/Workspaces.webm'
import GlanceVideo from '../assets/Glance.webm'
import CompactModeVideo from '../assets/CompactMode.webm'
import SplitViewsVideo from '../assets/SplitViews.webm'

import Video from './Video.astro'

const {
  title1 = 'Productivity',
  title2 = 'at',
  title3 = 'its best',
} = Astro.props

const features = [
  {
    title: 'Workspaces',
    description:
      'Organize your tabs into Workspaces to keep your projects separate and organized, and switch between them with ease.',
    video: WorkspacesVideo,
  },
  {
    title: 'Compact Mode',
    description:
      "Zen's Compact Mode gives you more screen real estate by hiding the tab bar when you don't need it, and showing it when you do.",
    video: CompactModeVideo,
  },
  {
    title: 'Glance',
    description:
      "Zen's Glance lets you preview tabs without switching to them, so you can quickly find the page you're looking for.",
    video: GlanceVideo,
  },
  {
    title: 'Split View',
    description:
      "Zen's Split View lets you view up to 4 tabs side by side, so you can compare information or multitask easily.",
    video: SplitViewsVideo,
  },
]
---

<section
  id="Features"
  class="relative flex w-full flex-col px-4 py-36 text-start md:px-24 lg:mx-auto lg:w-3/4 lg:px-0 lg:py-24"
>
  <div class="flex flex-col gap-2">
    <Description class="text-6xl font-bold">
      <motion.span client:load {...getTitleAnimation(0.2)}>
        {title1}
      </motion.span>
      <motion.span client:load {...getTitleAnimation(0.4)}>
        {title2}
      </motion.span>
      <motion.span client:load {...getTitleAnimation(0.6)}>
        {title3}
      </motion.span>
    </Description>
    <motion.p client:load {...getTitleAnimation(0.6)} className="3xl:w-1/2">
      Zen is packed with features that help you stay productive and focused.
      Browsers should be tools that help you get things done, not distractions
      that keep you from your work.
    </motion.p>
  </div>

  <div class="3xl:flex-row 3xl:gap-6 mt-6 flex flex-col gap-6">
    <div class="3xl:w-1/3 flex w-full flex-col gap-4">
      <div class="3xl:hidden flex gap-2 overflow-x-auto overflow-y-clip">
        {
          features.map((feature, index) => (
            <motion.button
              client:load
              {...getTitleAnimation()}
              class="features__tab whitespace-nowrap rounded-lg px-4 py-2 text-lg font-medium transition-all duration-200 hover:bg-subtle data-[active='true']:bg-subtle"
              data-active={index === 0 ? 'true' : undefined}
              data-index={index}
            >
              {feature.title}
            </motion.button>
          ))
        }
      </div>

      <div id="features-list" class="3xl:flex 3xl:flex-col 3xl:gap-3 hidden">
        {
          features.map((feature, index) => (
            <div
              class="features__item w-full cursor-pointer select-none rounded-xl p-4 transition-all duration-200 hover:bg-subtle data-[active='true']:bg-subtle"
              data-active={index === 0 ? 'true' : undefined}
              data-index={index}
            >
              <Description class="text-2xl font-bold">
                <motion.span
                  client:load
                  {...getTitleAnimation()}
                  class="features__title"
                >
                  {feature.title}
                </motion.span>
              </Description>
              <Description>
                <motion.span
                  client:load
                  {...getTitleAnimation()}
                  class="features__description"
                >
                  {feature.description}
                </motion.span>
              </Description>
            </div>
          ))
        }
      </div>

      <motion.div
        client:load
        {...getTitleAnimation()}
        id="features-description"
        class="3xl:hidden features__description flex min-h-12 items-center px-4 text-sm text-gray-600 dark:text-gray-300"
      >
        {features[0].description}</motion.div
      >
    </div>

    <div
      class="3xl:w-3/5 relative flex h-fit w-full flex-grow place-self-center rounded-xl"
    >
      <div
        class="features__video-stack relative aspect-video w-full overflow-hidden rounded-xl"
        style="perspective: 1000px; transform-style: preserve-3d;"
      >
        <div
          id="video-wrapper"
          class="3xl:flex-col absolute inset-0 flex h-full w-full transition-transform duration-500 ease-in-out"
        >
          {
            features.map((feature, index) => (
              <div
                class="features__video-slide flex h-full w-full flex-shrink-0 items-center justify-center"
                data-active={index === 0 ? 'true' : undefined}
                data-index={index}
              >
                <Video
                  autoplay={index === 0}
                  muted
                  playsinline
                  class="features__video h-auto max-h-full w-fit rounded-2xl object-cover"
                  src={feature.video}
                />
              </div>
            ))
          }
        </div>
        <div
          id="carousel-indicators"
          class="features__indicators 3xl:bottom-auto 3xl:left-auto 3xl:right-4 3xl:top-1/2 3xl:-translate-x-0 3xl:-translate-y-1/2 3xl:flex-col absolute bottom-4 left-1/2 z-10 flex -translate-x-1/2 flex-row gap-2"
        >
          {
            features.map((_, index) => (
              <span
                class="features__indicator 3xl:data-[active='true']:h-8 3xl:data-[active='true']:w-3 h-3 w-3 cursor-pointer rounded-full bg-dark opacity-70 transition-all duration-300 ease-in-out hover:opacity-100 data-[active='true']:h-3 data-[active='true']:w-8 data-[active='true']:opacity-100"
                data-active={index === 0 ? 'true' : undefined}
                data-index={index}
              />
            ))
          }
        </div>
      </div>
    </div>
  </div>
</section>

<script>
  const featureElements = document.querySelectorAll(
    '.features__item, .features__tab'
  )
  const descriptions = [
    'Organize your tabs into Workspaces to keep your projects separate and organized, and switch between them with ease.',
    "Zen's Compact Mode gives you more screen real estate by hiding the tab bar when you don't need it, and showing it when you do.",
    "Zen's Glance lets you preview tabs without switching to them, so you can quickly find the page you're looking for.",
    "Zen's Split View lets you view up to 4 tabs side by side, so you can compare information or multitask easily.",
  ]

  const videoWrapper = document.getElementById(
    'video-wrapper'
  ) as HTMLDivElement
  const indicators = document.querySelectorAll(
    '.features__indicator'
  ) as NodeListOf<HTMLSpanElement>
  const videos = document.querySelectorAll(
    '.features__video'
  ) as NodeListOf<HTMLVideoElement>
  const descriptionEl = document.getElementById(
    'features-description'
  ) as HTMLDivElement
  let currentIndex = 0
  let userInteracted = false
  let inactivityTimeout: NodeJS.Timeout | null = null

  const loadAllVideos = () => {
    const allVideos = document.querySelectorAll(
      '.features__video[data-src]'
    ) as NodeListOf<HTMLVideoElement>
    for (const video of allVideos) {
      const source = video.querySelector('source')
      const dataSrc = video.getAttribute('data-src')
      if (dataSrc && source) {
        source.src = dataSrc
        video.load()
        video.removeAttribute('data-src')
      }
    }
  }

  const preloadFeatureSectionVideos = () => {
    const featuresSection = document.getElementById('Features')
    if (featuresSection) {
      const observer = new IntersectionObserver(
        (entries) => {
          if (entries[0].isIntersecting) {
            loadAllVideos()
            observer.disconnect()
          }
        },
        {
          rootMargin: '200px 0px',
          threshold: 0.1,
        }
      )

      observer.observe(featuresSection)
    }
  }

  preloadFeatureSectionVideos()

  function updateCarousel(index: number) {
    if (index < 0 || index >= featureElements.length) return

    currentIndex = index
    const offset = index * -100

    const mediaQuery = window.matchMedia('(min-width: 1792px)')
    if (mediaQuery.matches) {
      videoWrapper.style.transform = `translateY(${offset}%)`
    } else {
      videoWrapper.style.transform = `translateX(${offset}%)`
    }
  }

  function playVideo(index: number) {
    const allVideos = document.querySelectorAll(
      '.features__video'
    ) as NodeListOf<HTMLVideoElement>

    for (const video of allVideos) {
      if (!video.paused) {
        video.pause()
      }
    }

    if (index >= 0 && index < allVideos.length) {
      const videoToPlay = allVideos[index]
      videoToPlay.currentTime = 0
      videoToPlay.play().catch(() => {})
    }
  }

  function changeToFeature(index: number) {
    if (index < 0 || index >= featureElements.length) return

    if (userInteracted) {
      for (const video of videos) {
        video.setAttribute('loop', 'true')
      }
    }

    currentIndex = index

    for (const feature of featureElements) {
      const featureIndex = parseInt(feature.getAttribute('data-index') || '0')
      if (featureIndex === index) {
        feature.setAttribute('data-active', 'true')
      } else {
        feature.removeAttribute('data-active')
      }
    }

    updateCarousel(index)

    playVideo(index)

    descriptionEl.textContent = descriptions[index]

    for (let i = 0; i < indicators.length; i++) {
      if (i === index) {
        indicators[i].classList.add('features__indicator--active')
        indicators[i].setAttribute('data-active', 'true')
      } else {
        indicators[i].classList.remove('features__indicator--active')
        indicators[i].removeAttribute('data-active')
      }
    }
  }

  function setupAutoAdvance() {
    for (const [index, video] of videos.entries()) {
      video.addEventListener('ended', () => {
        if (!userInteracted) {
          const nextIndex = (index + 1) % videos.length
          changeToFeature(nextIndex)
        }
      })
    }
  }

  function resetInactivityTimeout() {
    if (inactivityTimeout) {
      clearTimeout(inactivityTimeout)
    }

    inactivityTimeout = setTimeout(() => {
      for (const video of videos) {
        video.removeAttribute('loop')
      }
    }, 30000)
  }

  function markUserInteraction() {
    userInteracted = true
    resetInactivityTimeout()

    for (const video of videos) {
      video.setAttribute('loop', 'true')
    }

    setTimeout(() => {
      userInteracted = false
    }, 30000)
  }

  for (const feature of featureElements) {
    feature.addEventListener('click', (e) => {
      markUserInteraction()
      const target = e.currentTarget as HTMLElement
      const index = parseInt(target.getAttribute('data-index') || '0')
      changeToFeature(index)
    })
  }

  for (let i = 0; i < indicators.length; i++) {
    indicators[i].addEventListener('click', () => {
      markUserInteraction()
      changeToFeature(i)
    })
  }

  const videoStack = document.querySelector(
    '.features__video-stack'
  ) as HTMLElement
  let startX = 0
  let currentX = 0
  let startY = 0
  let currentY = 0

  videoStack.addEventListener('touchstart', (e) => {
    markUserInteraction()
    startX = e.touches[0].clientX
    startY = e.touches[0].clientY
    videoWrapper.style.transition = 'none'
  })

  videoStack.addEventListener('touchmove', (e) => {
    currentX = e.touches[0].clientX
    currentY = e.touches[0].clientY
  })

  videoStack.addEventListener('touchend', () => {
    videoWrapper.style.transition = 'transform 0.5s ease-in-out'
    const deltaX = startX - currentX
    const deltaY = startY - currentY

    const mediaQuery = window.matchMedia('(min-width: 1792px)')

    if (mediaQuery.matches) {
      if (Math.abs(deltaY) > 50) {
        if (deltaY > 0 && currentIndex < featureElements.length - 1) {
          changeToFeature(currentIndex + 1)
        } else if (deltaY < 0 && currentIndex > 0) {
          changeToFeature(currentIndex - 1)
        } else {
          changeToFeature(currentIndex)
        }
      }
    } else if (Math.abs(deltaX) > 50) {
      if (deltaX > 0 && currentIndex < featureElements.length - 1) {
        changeToFeature(currentIndex + 1)
      } else if (deltaX < 0 && currentIndex > 0) {
        changeToFeature(currentIndex - 1)
      } else {
        changeToFeature(currentIndex)
      }
    }
  })

  const resizeHandler = () => {
    videoWrapper.style.transition = 'none'
    updateCarousel(currentIndex)

    setTimeout(() => {
      videoWrapper.style.transition = 'transform 0.5s ease-in-out'
    }, 100)
  }

  window.addEventListener('resize', resizeHandler)

  setupAutoAdvance()
  playVideo(0)
  resetInactivityTimeout()
</script>
