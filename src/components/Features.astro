---
import Description from '../components/Description.astro'
import { motion } from 'motion/react'
import { getTitleAnimation } from '../animations'

import WorkspacesVideo from '../assets/Workspaces.webm'
import GlanceVideo from '../assets/Glance.webm'
import CompactModeVideo from '../assets/CompactMode.webm'
import SplitViewsVideo from '../assets/SplitViews.webm'

import Video from './Video.astro'

const {
  title1 = 'Productivity',
  title2 = 'at',
  title3 = 'its best',
} = Astro.props

const features = [
  {
    title: 'Workspaces',
    description:
      'Organize your tabs into Workspaces to keep your projects separate and organized, and switch between them with ease.',
    video: WorkspacesVideo,
  },
  {
    title: 'Compact Mode',
    description:
      "Zen's Compact Mode gives you more screen real estate by hiding the tab bar when you don't need it, and showing it when you do.",
    video: CompactModeVideo,
  },
  {
    title: 'Glance',
    description:
      "Zen's Glance lets you preview tabs without switching to them, so you can quickly find the page you're looking for.",
    video: GlanceVideo,
  },
  {
    title: 'Split View',
    description:
      "Zen's Split View lets you view up to 4 tabs side by side, so you can compare information or multitask easily.",
    video: SplitViewsVideo,
  },
]
---

<section
  id="Features"
  class="relative flex w-full flex-col px-4 text-start md:px-24 lg:mx-auto lg:w-3/4 lg:px-0 py-36 lg:py-24"
>
  <div class="flex flex-col gap-2">
    <Description class="text-6xl font-bold">
      <motion.span client:load {...getTitleAnimation(0.2)}>
        {title1}
      </motion.span>
      <motion.span client:load {...getTitleAnimation(0.4)}>
        {title2}
      </motion.span>
      <motion.span client:load {...getTitleAnimation(0.6)}>
        {title3}
      </motion.span>
    </Description>
    <motion.p client:load {...getTitleAnimation(0.6)} className="3xl:w-1/2">
      Zen is packed with features that help you stay productive and focused.
      Browsers should be tools that help you get things done, not distractions
      that keep you from your work.
    </motion.p>
  </div>
  
  <div class="flex flex-col gap-6 3xl:flex-row 3xl:gap-6" style="margin-top: 1.5rem;">
    <div class="flex w-full flex-col gap-4 3xl:w-1/3">
      <div class="flex gap-2 overflow-x-auto overflow-y-clip 3xl:hidden">
        {
          features.map((feature, index) => (
            <motion.button
              client:load
              {...getTitleAnimation()}
              class="feature-tab whitespace-nowrap"
              data-active={index === 0 ? 'true' : undefined}
              data-index={index}
            >
              {feature.title}
            </motion.button>
          ))
        }
      </div>

      <div id="features-list" class="hidden 3xl:flex 3xl:flex-col 3xl:gap-3">
        {
          features.map((feature, index) => (
            <motion.div
              client:load
              {...getTitleAnimation()}
              className="feature"
              data-active={index === 0 ? 'true' : undefined}
              data-index={index}
            >
              <Description class="text-2xl font-bold">
                {feature.title}
              </Description>
              <Description>{feature.description}</Description>
            </motion.div>
          ))
        }
      </div>

      <motion.div client:load {...getTitleAnimation()} class="3xl:hidden">
        <div class="feature-description"></div>
      </motion.div>
    </div>

    <div class="relative w-full 3xl:w-3/5 flex h-fit place-self-center flex-grow">
      <div class="video-stack relative w-full">
        <div
          id="video-wrapper"
          class="absolute inset-0 h-full w-full transition-transform duration-500 ease-in-out"
        >
          {
            features.map((feature, index) => (
              <div
                class="video-slide"
                data-active={index === 0 ? 'true' : undefined}
                data-index={index}
              >
                <Video
                  autoplay={index === 0}
                  loop
                  muted
                  playsinline
                  class="feature-video"
                  src={feature.video}
                />
              </div>
            ))
          }
        </div>
        <div
          id="carousel-indicators"
          class="absolute right-4 top-1/2 z-10 flex -translate-y-1/2 flex-col gap-2"
        >
          {
            features.map((_, index) => (
              <span
                class:list={['indicator', { active: index === 0 }]}
                data-index={index}
              />
            ))
          }
        </div>
      </div>
    </div>
  </div>
</section>

<script>
  const features = document.querySelectorAll('.feature, .feature-tab')
  const descriptions = [
    'Organize your tabs into Workspaces to keep your projects separate and organized, and switch between them with ease.',
    "Zen's Compact Mode gives you more screen real estate by hiding the tab bar when you don't need it, and showing it when you do.",
    "Zen's Glance lets you preview tabs without switching to them, so you can quickly find the page you're looking for.",
    "Zen's Split View lets you view up to 4 tabs side by side, so you can compare information or multitask easily.",
  ]

  const videoWrapper = document.getElementById('video-wrapper') as HTMLDivElement
  const videoSlides = document.querySelectorAll('.video-slide') as NodeListOf<HTMLDivElement>
  const indicators = document.querySelectorAll('.indicator') as NodeListOf<HTMLSpanElement>
  let currentIndex = 0

  const descriptionEl = document.querySelector('.feature-description')
  if (descriptionEl) {
    descriptionEl.textContent = descriptions[0]
  }
  
  const loadAllVideos = () => {
    const allVideos = document.querySelectorAll('.feature-video[data-src]') as NodeListOf<HTMLVideoElement>
    for (const video of allVideos) {
      const source = video.querySelector('source')
      const dataSrc = video.getAttribute('data-src')
      if (dataSrc && source) {
        source.src = dataSrc
        video.load()
        video.removeAttribute('data-src')
      }
    }
  }
  
  const preloadFeatureSectionVideos = () => {
    const featuresSection = document.getElementById('Features')
    if (featuresSection) {
      const observer = new IntersectionObserver((entries) => {
        if (entries[0].isIntersecting) {
          loadAllVideos()
          observer.disconnect()
        }
      }, { 
        rootMargin: '200px 0px',
        threshold: 0.1
      })
      
      observer.observe(featuresSection)
    }
  }
  
  preloadFeatureSectionVideos()

  function updateCarousel(index) {
    if (index < 0 || index >= features.length) return

    currentIndex = index
    const offset = index * -100

    const mediaQuery = window.matchMedia('(min-width: 1792px)')
    if (mediaQuery.matches) {
      videoWrapper.style.transform = `translateY(${offset}%)`
      videoWrapper.style.flexDirection = 'column'
    } else {
      videoWrapper.style.transform = `translateX(${offset}%)`
      videoWrapper.style.flexDirection = 'row'
    }
  }

  function changeToFeature(index) {
    if (index < 0 || index >= features.length) return

    currentIndex = index

    for (const f of features) {
      const featureIndex = parseInt(f.getAttribute('data-index') || '0')
      if (featureIndex === index) {
        f.setAttribute('data-active', 'true')
      } else {
        f.removeAttribute('data-active')
      }
    }

    const descriptionEl = document.querySelector('.feature-description')
    if (descriptionEl) {
      descriptionEl.textContent = descriptions[index]
    }

    updateCarousel(index)

    const allVideos = document.querySelectorAll('.feature-video') as NodeListOf<HTMLVideoElement>
    for (let i = 0; i < allVideos.length; i++) {
      const video = allVideos[i]
      if (i === index) {
        if (video.readyState >= 2) {
          video.currentTime = 0
          video.play().catch(() => {})
        } else {
          video.addEventListener('loadeddata', () => {
            video.currentTime = 0
            video.play().catch(() => {})
          }, { once: true })
        }
      } else if (!video.paused) {
        video.pause()
      }
    }

    for (let i = 0; i < indicators.length; i++) {
      if (i === index) {
        indicators[i].classList.add('active')
      } else {
        indicators[i].classList.remove('active')
      }
    }
  }

  for (const feature of features) {
    feature.addEventListener('click', (e) => {
      const target = e.currentTarget
      const index = parseInt((target as HTMLElement)?.getAttribute('data-index') || '0')
      changeToFeature(index)
    })
  }

  for (let i = 0; i < indicators.length; i++) {
    indicators[i].addEventListener('click', () => {
      changeToFeature(i)
    })
  }

  const videoStack = document.querySelector('.video-stack') as HTMLElement
  let startX = 0
  let currentX = 0
  let startY = 0
  let currentY = 0

  videoStack.addEventListener('touchstart', (e) => {
    startX = e.touches[0].clientX
    startY = e.touches[0].clientY
    videoWrapper.style.transition = 'none'
  })

  videoStack.addEventListener('touchmove', (e) => {
    currentX = e.touches[0].clientX
    currentY = e.touches[0].clientY
  })

  videoStack.addEventListener('touchend', () => {
    videoWrapper.style.transition = 'transform 0.5s ease-in-out'
    const deltaX = startX - currentX
    const deltaY = startY - currentY

    const mediaQuery = window.matchMedia('(min-width: 1792px)')

    if (mediaQuery.matches) {
      if (Math.abs(deltaY) > 50) {
        if (deltaY > 0 && currentIndex < features.length - 1) {
          changeToFeature(currentIndex + 1)
        } else if (deltaY < 0 && currentIndex > 0) {
          changeToFeature(currentIndex - 1)
        } else {
          changeToFeature(currentIndex)
        }
      }
    } else if (Math.abs(deltaX) > 50) {
      if (deltaX > 0 && currentIndex < features.length - 1) {
        changeToFeature(currentIndex + 1)
      } else if (deltaX < 0 && currentIndex > 0) {
        changeToFeature(currentIndex - 1)
      } else {
        changeToFeature(currentIndex)
      }
    }
  })

  const resizeHandler = () => {
    videoWrapper.style.transition = 'none'
    updateCarousel(currentIndex)
    setTimeout(() => {
      videoWrapper.style.transition = 'transform 0.5s ease-in-out'
    }, 100)
  }

  window.addEventListener('resize', resizeHandler)
</script>

<style>
  .feature {
    @apply hover:bg-subtle w-full cursor-pointer select-none rounded-lg p-4;
    transition: all 0.2s ease-in-out;

    &[data-active='true'] {
      @apply bg-subtle;
    }
  }

  .feature-tab {
    @apply hover:bg-subtle rounded-lg px-4 py-2 text-lg font-medium;
    transition: all 0.2s ease-in-out;

    &[data-active='true'] {
      @apply bg-subtle;
    }
  }

  .feature-description {
    @apply px-4 text-sm text-gray-600 dark:text-gray-300;
  }

.video-stack {
  @apply aspect-video overflow-hidden rounded-xl;
  perspective: 1000px;
  transform-style: preserve-3d;
}

#video-wrapper {
  @apply flex h-full w-full;
  transition: transform 0.5s ease-in-out;
}

.video-slide {
  @apply flex h-full w-full flex-shrink-0 items-center justify-center;
}

@media (min-width: 1792px) {
  #video-wrapper {
    flex-direction: column;
  }
}

@media (max-width: 1791px) {
  #video-wrapper {
    flex-direction: row;
  }
}

.feature-video {
  @apply h-auto max-h-full w-fit;
  object-fit: cover;
  border-radius: 16px;
}

#carousel-indicators {
  z-index: 10;
}

.indicator {
  @apply h-3 w-3 cursor-pointer rounded-full bg-dark opacity-70 transition-all duration-300 ease-in-out hover:opacity-100;
}

.indicator.active {
  @apply h-8 w-3 opacity-100;
}

@media (max-width: 1791px) {
  #carousel-indicators {
    bottom: 1rem;
    left: 50%;
    top: auto;
    right: auto;
    transform: translateX(-50%) !important;
    flex-direction: row;
  }

  .indicator.active {
    width: 2rem;
    height: 0.75rem;
  }
  
  .feature-description {
    min-height: 3rem;
    display: flex;
    align-items: center;
  }
}
</style>