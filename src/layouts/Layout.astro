---
interface Props {
  title: string
  description?: string
  ogImage?: string
  isHome?: boolean
}

const { title, description, ogImage, isHome } = Astro.props
const defaultDescription = 'Zen Browser is built for speed, security, and true privacy. Download now to enjoy a beautifully-designed, distraction-free web experience packed with features.';
const defaultOgImage = '/share-pic.png';
import '@fontsource/bricolage-grotesque/400.css'
import NavBar from '../components/NavBar.astro'
import Footer from '../components/Footer.astro'
import MobileNavBar from '../components/MobileNavBar'
---

<script is:inline data-cfasync="false">
  const theme = (() => {
    if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
      return localStorage.getItem('theme') ?? 'light'
    }
    if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
      return 'dark'
    }
    return 'light'
  })()

  if (theme === 'light') {
    document.documentElement.setAttribute('data-theme', 'light')
  } else {
    document.documentElement.setAttribute('data-theme', 'dark')
  }

  window.localStorage.setItem('theme', theme)
</script>

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description ?? defaultDescription} />
    <meta name="viewport" content="width=device-width, initial-scale=1"/>
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="sitemap" href="/sitemap-0.xml" />

    {isHome && (
      <!-- Injecting schema to homepage only (for SEO) -->
      <script is:inline type="application/ld+json">
      {
        "@context":"https://schema.org",
        "@type":"WebSite",
        "name":"Zen Browser",
        "url":"https://zen-browser.app/"
      }
      </script>)}

    <!-- ICO favicon as a fallback for browsers that don't support SVG favicons (Safari) -->
    <link rel="icon" type="image/x-icon" href="/favicon.ico" />
    
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <meta name="theme-color" content="#da755b" />
  
    <!-- Open Graph -->
    <meta property="og:title" content={title} />
    <meta property="og:type" content="website" />
    <meta property="og:image" content={ogImage ?? defaultOgImage} />
    <meta
      property="og:description"
      content={description ?? defaultDescription}
    />
    <meta property="og:color" content="#da755b" />
    <!-- Twitter card -->
    <meta name="twitter:card" content="summary_large_image" />
    <!-- Fonts -->
    <link rel="preconnect" href="https://fonts.bunny.net" />
    <link
      href="https://fonts.bunny.net/css?family=bricolage-grotesque:200,300,400,500,600,700,800|instrument-serif:400,400i"
      rel="stylesheet"
    />
    <!-- RSS Feed -->
    <link
      rel="alternate"
      type="application/rss+xml"
      title="Zen Browser Release Notes"
      href={`${Astro.url.origin}/feed.xml`}
    />
  </head>
  <body
    class="overflow-x-hidden bg-paper font-['bricolage-grotesque'] text-dark"
  >
    <NavBar />
    <MobileNavBar client:load />
    <slot />
    <Footer />
  </body>
</html>
<script>
  document.addEventListener('keydown', (e) => {
    if (window.location.pathname.includes('/download')) {
      handleDownloadPageKey(e);
    } 
    handleGeneralKey(e);
  });
  
  function handleDownloadPageKey(e) {
    const url = window.location.href;
  
    switch (e.key) {
      case 'w':
        clickAndScroll('os-select-windows');
        break;
      case 'l':
        clickAndScroll('os-select-linux');
        break;
      case 'm':
        document.querySelector('#macos-select')?.click();
        break;
      default:
        handleOsSpecificKeys(e, url);
    }
  }
  
  function handleOsSpecificKeys(e, url) {
    if (url.includes('#os-select-windows')) {
      switch (e.key) {
        case '1':
          clickAndScroll('windows-target-x86_64');
          break;
        case '2':
          clickAndScroll('windows-target-arm64');
          break;
      }
    } else if (url.includes('#windows-target-x86_64') || url.includes('#windows-target-arm64')) {
      handleWindowsTargetKeys(e, url);
    } else if (url.includes('#os-select-linux')) {
      switch (e.key) {
        case '1':
          clickAndScroll('linux-target-x86_64');
          break;
        case '2':
          clickAndScroll('linux-target-aarch64');
          break;
      }
    } else if (url.includes('#linux-target-x86_64') || url.includes('#linux-target-aarch64')) {
      handleLinuxTargetKeys(e);
    }
  }
  
  function handleWindowsTargetKeys(e, url) {
    const twilight = url.includes('?twilight');
  
    switch (e.key) {
      case '1':
        document.querySelector('#windows-installer-download')?.click();
        break;
      case '2':
        if (twilight) {
          document.querySelector('#windows-zip-download')?.click();
        }
        break;
    }
  }
  
  function handleLinuxTargetKeys(e) {
    switch (e.key) {
      case '1':
        document.querySelector('#linux-tar-download')?.click();
        break;
      case '2':
        document.querySelector('#linux-appimage-download')?.click();
        break;
      case '3':
        document.querySelector('#linux-flathub-download')?.click();
        break;
    }
  }
  
  function clickAndScroll(targetId) {
    const targetElement = document.querySelector(`#${targetId}`);
    if (targetElement) {
      targetElement.click();
      window.location.href = `#${targetId}`;
    }
  }
  
  function handleGeneralKey(e) {
    switch (e.key) {
      case 's':
        window.location.href = '/';
        break;
      case 'n':
        window.location.href = '#nav-bar';
        break;
      case 'f':
        window.location.href = '#footer';
        break;
      case 'e':
        window.location.href = '/#features';
        break;
      case 'd':
        window.location.href = '/download';
        break;
      case 'z':
        window.location.href = '/mods';
        break;
      case 'r':
        window.location.href = '/release-notes';
        break;
      case 't':
        window.location.href = '/download?twilight';
        break;
      case 'g':
        window.open('https://github.com/zen-browser');
        break;
    }
  }
</script>
<style is:global>
  @font-face {
    font-family: 'Junicode';
    src: url('/fonts/JunicodeVF-Roman.woff2') format('woff2');
  }

  @font-face {
    font-family: 'Junicode-Italic';
    src: url('/fonts/JunicodeVF-Italic.woff2') format('woff2');
  }

  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }

  :root {
    --zen-paper: #f2f0e3;
    --zen-dark: #2e2e2e;
    --zen-muted: rgba(0, 0, 0, 0.05);

    &[data-theme='dark'] {
      --zen-paper: #1f1f1f;
      --zen-dark: #d1cfc0;
      --zen-muted: rgba(255, 255, 255, 0.05);
    }
  }

  html {
    scroll-behavior: smooth;
  }

  body,
  body > * {
    font-family: 'Bricolage Grotesque', sans-serif;
    font-optical-sizing: auto;
    font-style: normal;
    font-weight: 500;
    font-variation-settings: 'wdth' 100;
  }

  h1 .italic {
    font-family: 'Junicode-Italic', serif;
    font-weight: 400;
    font-feature-settings: 'swsh' 0;
    font-style: normal;
  }
</style>
<style is:global>
  /* Declare a custom CSS class to make the icon look right */
  .svg-inline--fa {
    overflow: visible;
    box-sizing: content-box;
    display: inline-block;
    height: 1em;
    vertical-align: -0.125em;
  }
</style>
